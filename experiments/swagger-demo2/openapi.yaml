openapi: 3.0.0
info:
  title: 12 стульев API
  version: 1.0.0
  description: API для управления продуктами, пользователями и заказами
servers:
  - url: http://localhost:3000/
    description: Локальный сервер (v1)
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Price:
      type: object
      properties:
        idProduct:
          type: integer
          example: 4
        idStorage:
          type: integer
          example: 1
        idPromotion:
          type: integer
          example: 4
        price:
          type: number
          format: float
          example: 332
        sale:
          type: integer
          example: 15
        count:
          type: integer
          example: 6
    PaginatedPrices:
      type: object
      properties:
        totalItems:
          type: integer
          example: 100
        prices:
          type: array
          items:
            $ref: "#/components/schemas/Price"
    Error:
      type: object
      properties:
        error:
          type: string
          example: Неверные параметры
        message:
          type: string
          example: limit должен быть между 1 и 100
        statusCode:
          type: integer
          example: 400
    Product:
      type: object
      properties:
        idProduct:
          type: integer
          example: 1
        name:
          type: string
          example: Стол
        description:
          type: string
          example: Обеденный
    ProductInput:
      type: object
      properties:
        name:
          type: string
          example: Стул
        description:
          type: string
          example: Кухонный
      required:
        - name
    PaginatedProducts:
      type: object
      properties:
        totalItems:
          type: integer
          example: 100
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Storage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Склад 1
    Reserve:
      type: object
      properties:
        idReserve:
          type: integer
          example: 6
        idProduct:
          type: integer
          example: 5
        idOrder:
          type: integer
          example: 3
        count:
          type: integer
          example: 3
    ReserveInput:
      type: object
      properties:
        idProduct:
          type: integer
          example: 5
        idOrder:
          type: integer
          example: 3
        count:
          type: integer
          example: 10
      required:
        - idProduct
        - idOrder
        - count
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Гена крокодил
        phone:
          type: string
          example: "444444"
        address:
          type: string
          example: ""
        region:
          type: integer
          example: 1
    UserInput:
      type: object
      properties:
        name:
          type: string
          example: Вася
        phone:
          type: string
          example: "444444"
        address:
          type: string
          example: ""
        region:
          type: integer
          example: 1
      required:
        - name
        - phone
        - region
    Order:
      type: object
      properties:
        idOrder:
          type: integer
          example: 45
        idUser:
          type: integer
          example: 1
        region:
          type: integer
          example: 1
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
    OrderItem:
      type: object
      properties:
        idProduct:
          type: integer
          example: 123
        count:
          type: integer
          example: 4
    OrderInput:
      type: object
      properties:
        region:
          type: integer
          example: 1
      required:
        - region
    OrderProductInput:
      type: object
      properties:
        idProduct:
          type: integer
          example: 123
        count:
          type: integer
          example: 4
      required:
        - idProduct
        - count
  examples:
    StorageArrayExample:
      value:
        - id: 1
          name: Склад 1
        - id: 2
          name: Склад 2
        - id: 3
          name: Склад 3
    ReserveArrayExample:
      value:
        - idReserve: 6
          idProduct: 5
          idOrder: 3
          count: 3
        - idReserve: 7
          idProduct: 23
          idOrder: 3
          count: 6
    ReserveCancelExample:
      value:
        idReserve: 6
        idProduct: 5
        idOrder: 3
        count: 0
        message: Резерв отменен
tags:
  - name: Storages
    description: Операции со складами
  - name: Products
    description: Операции с продуктами
  - name: Prices
    description: Операции с ценами и скидками
  - name: Users
    description: Операции с пользователями
paths:
  /v1/prices:
    get:
      summary: Получить цены с пагинацией (limit/offset)
      tags:
        - Prices
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Количество элементов на странице
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Смещение от начала списка
      responses:
        "200":
          description: Список цен с пагинацией
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPrices"
              example:
                totalItems: 100
                prices:
                  - idProduct: 4
                    idStorage: 1
                    idPromotion: 4
                    price: 332
                    sale: 15
                    count: 6
                  - idProduct: 4
                    idStorage: 2
                    idPromotion: 4
                    price: 332
                    sale: 10
                    count: 16
        "400":
          description: Неверные параметры пагинации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/prices/{idProduct}":
    get:
      summary: Получить цены продукта по всем складам и акциям
      tags:
        - Prices
      parameters:
        - in: path
          name: idProduct
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Массив цен продукта для разных складов и акций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Price"
              example:
                - idProduct: 4
                  idStorage: 1
                  idPromotion: 4
                  price: 332
                  sale: 15
                  count: 8
                - idProduct: 4
                  idStorage: 2
                  idPromotion: 5
                  price: 300
                  sale: 10
                  count: 6
                - idProduct: 4
                  idStorage: 3
                  idPromotion: 6
                  price: 400
                  sale: 20
                  count: 3
        "404":
          description: Цены для продукта не найдены
  /v1/prices/promotion/:
    delete:
      summary: Применение товара к акции. удаление из резерва акций. (idorder,
        idproduct, idstorage)
      tags:
        - Prices
      parameters:
        - in: query
          name: idorder
          schema:
            type: integer
          required: true
          description: ID заказа
        - in: query
          name: idproduct
          schema:
            type: integer
          required: true
          description: ID продукта
        - in: query
          name: idstorage
          schema:
            type: integer
          required: true
          description: ID склада
      responses:
        "200":
          description: Акция успешно применена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Акция успешно применена
                  deletedParams:
                    type: object
                    properties:
                      idorder:
                        type: integer
                        example: 123
                      idproduct:
                        type: integer
                        example: 4
                      idstorage:
                        type: integer
                        example: 1
        "400":
          description: Не хватает обязательных параметров
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: Неверные параметры
                message: Необходимо указать idorder, idproduct и idstorage
                statusCode: 400
        "404":
          description: Акция не найдена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: Акция не найдена
                message: Акция с указанными параметрами не найдена
                statusCode: 404
  /v1/products:
    get:
      summary: Получить список продуктов с пагинацией (limit/offset)
      tags:
        - Products
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Количество элементов
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Смещение от начала списка
      responses:
        "200":
          description: Успешный запрос. Возвращает список продуктов.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedProducts"
              example:
                totalItems: 100
                products:
                  - idProduct: 1
                    name: Стол
                    description: Обеденный
                  - idProduct: 2
                    name: Стул
                    description: Кухонный
        "400":
          description: Неверные параметры пагинации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/products/{idProduct}":
    get:
      summary: Получить продукт по ID
      tags:
        - Products
      parameters:
        - in: path
          name: idProduct
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Успешный запрос. Возвращает данные продукта.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Продукт не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/storages:
    get:
      summary: Получить список складов
      tags:
        - Storages
      responses:
        "200":
          description: Список складов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Storage"
              examples:
                example-1:
                  $ref: "#/components/examples/StorageArrayExample"
  "/v1/storages/{idStorage}":
    get:
      summary: Получить склад по ID
      tags:
        - Storages
      parameters:
        - in: path
          name: idStorage
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Данные склада
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
        "404":
          description: Склад не найден
  "/v1/storages/{idStorage}/reserves":
    delete:
      summary: Удалить резерв товара
      tags:
        - Storages
      parameters:
        - in: path
          name: idStorage
          required: true
          schema:
            type: integer
        - in: query
          name: idProduct
          required: true
          schema:
            type: integer
        - in: query
          name: idOrder
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Резерв успешно удален
        "400":
          description: Неверные параметры запроса
        "404":
          description: Резерв не найден
    patch:
      summary: Зарезервировать товар на складе (count:0 - отмена резерва)
      tags:
        - Storages
      parameters:
        - in: path
          name: idStorage
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReserveInput"
            examples:
              Резервирование товар:
                value:
                  idProduct: 5
                  idOrder: 3
                  count: 10
              Отмена резерва:
                value:
                  idProduct: 5
                  idOrder: 3
                  count: 0
      responses:
        "200":
          description: Количество резерва изменено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reserve"
              examples:
                normalResponse:
                  value:
                    idReserve: 6
                    idProduct: 5
                    idOrder: 3
                    count: 10
                cancelResponse:
                  $ref: "#/components/examples/ReserveCancelExample"
        "400":
          description: Неверные параметры запроса
        "404":
          description: Резерв не найден
    get:
      summary: Получить резервы товаров по заказу
      tags:
        - Storages
      parameters:
        - in: path
          name: idStorage
          required: true
          schema:
            type: integer
        - in: query
          name: idOrder
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Список резервов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reserve"
              examples:
                example-1:
                  $ref: "#/components/examples/ReserveArrayExample"
        "400":
          description: Не указан idOrder
  /v1/users:
    post:
      summary: Добавить пользователя
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      summary: Получить список пользователей
      tags:
        - Users
      responses:
        "200":
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  "/v1/users/{idUser}":
    get:
      summary: Получить пользователя по ID
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      summary: Изменить данные пользователя
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Алеша Алексеевич
      responses:
        "200":
          description: Данные пользователя обновлены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/v1/users/{idUser}/orders":
    post:
      summary: Создать новый заказ или получить существующий
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "200":
          description: Заказ создан или получен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    get:
      summary: Получить заказы пользователя по статусу
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
        - in: query
          name: state
          schema:
            type: string
            example: closed
      responses:
        "200":
          description: Список заказов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  "/v1/users/{idUser}/orders/{idOrder}":
    post:
      summary: Добавить товар в заказ
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: idOrder
          required: true
          schema:
            type: integer
            example: 45
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderProductInput"
      responses:
        "200":
          description: Товар добавлен в заказ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                userNotFound:
                  value:
                    error: Пользователь не найден
                    message: Пользователь с ID 999 не найден
                    statusCode: 404
                orderNotFound:
                  value:
                    error: Заказ не найден
                    message: Заказ с ID 999 не найден
                    statusCode: 404
                productNotFound:
                  value:
                    error: Товар не найден
                    message: Товар с ID 999 не найден
                    statusCode: 404
    patch:
      summary: Изменить количество товара в заказе
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
        - in: path
          name: idOrder
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderProductInput"
      responses:
        "200":
          description: Количество товара изменено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      summary: Удалить товар из заказа
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
        - in: path
          name: idOrder
          required: true
          schema:
            type: integer
        - in: query
          name: idProduct
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Товар удален из заказа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    get:
      summary: Получить заказ по ID
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
        - in: path
          name: idOrder
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Данные заказа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
